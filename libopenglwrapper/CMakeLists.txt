#cmake -DCMAKE_BUILD_TYPE=Debug
cmake_minimum_required(VERSION 3.0.0)

project(openglWrapper LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(EXEC ${PROJECT_NAME})

include_directories( SYSTEM ${GLM_INCLUDE_DIR} )
include_directories( SYSTEM ${GLEW_INCLUDE_DIR} )
include_directories( SYSTEM ${GLFW_INCLUDE_DIR} )
include_directories( SYSTEM $ENV{freeglut_INCLUDE_DIR} )

get_property(dirs DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
foreach(dir ${dirs})
    message(STATUS "${dir}")
endforeach()

if( MSVC )
    add_compile_options( /W4 /WX )
    add_compile_options( /MP )
else()
    add_compile_options( -Wall -Wextra -pedantic -Werror )
    add_definitions( -Wfatal-errors )
endif()

find_package( GLEW REQUIRED )

file( GLOB_RECURSE SOURCES include/*.hpp src/*.hpp src/*.cpp )
source_group( TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SOURCES} )
add_library( ${EXEC} SHARED ${SOURCES} )

set( DEPENDENCIES
LOGLW-AdditionalDeps
sdl2wrapper
glew
${GLFW3_LIBRARIES}
${GLFW_LIBRARIES}
freeglut_static
${OPENGL_LIBRARIES}
${OPENGL_LIBRARY}
)

if( MSVC )
    target_link_libraries( ${EXEC} ${DEPENDENCIES} )
else()
    target_link_libraries( ${EXEC} ${DEPENDENCIES} stdc++fs  )
endif()

if( MSVC )

#copy glew
    if( ${CMAKE_BUILD_TYPE} MATCHES "Debug" )
        set( GLEW_BIN glew32d.dll )
    else()
        set( GLEW_BIN glew32.dll )
    endif()
    add_custom_command( TARGET ${EXEC}
        POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/bin/${CMAKE_BUILD_TYPE}/${GLEW_BIN} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_BUILD_TYPE} )
endif()

target_include_directories(${EXEC} PUBLIC include)
target_include_directories(${EXEC} PRIVATE src)