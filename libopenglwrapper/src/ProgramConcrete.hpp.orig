#pragma once

#include "libopenglwrapper/IProgram.hpp"
#include "CUL/GenericUtils/DumbPtr.hpp"
#include "CUL/STL_IMPORTS/STD_map.hpp"

NAMESPACE_BEGIN( LOGLW )

class ProgramConcrete final:
    public IProgram
{
public:
    ProgramConcrete();
    ~ProgramConcrete();

<<<<<<< Updated upstream
    void setUniform( CsStr& name, const char* value ) override;
    CsStr getUniform( CsStr& name ) override;
    CsStr getAttribute( CsStr& name ) override;
=======
protected:
private:
    using AttribKey = unsigned int;
    using AttribMap = std::map<CUL::String, AttribKey>;

    void setAttrib( CsStr& name, const char* value ) override;
    void setAttrib( CsStr& name, Cfloat value ) override;
    void setAttrib( CsStr& name, cunt value ) override;
    void setAttrib( CsStr& name, Cint value ) override;

    CsStr getAttributeStr( CsStr& name ) override;
    Cfloat getAttributeF( CsStr& name ) override;
    cunt getAttributeUi( CsStr& name ) override;
    Cint getAttributeI( CsStr& name ) override;
>>>>>>> Stashed changes

    void attachShader( const IShader* shader ) override;
    void link() override;
    void userProgram() override;
    void validate() override;

<<<<<<< Updated upstream
    Cunt getProgramId() const override;
=======
    const AttribKey getAttribLocation( CsStr& name ) const;
>>>>>>> Stashed changes

    virtual cunt getProgramId() const override;

    unsigned int m_id = 0;
    AttribMap m_attribMap;

private: // Deleted
    ProgramConcrete( const ProgramConcrete& arg ) = delete;
    ProgramConcrete& operator=( const ProgramConcrete& rhv ) = delete;

};

NAMESPACE_END( LOGLW )